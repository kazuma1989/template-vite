// https://www.typescriptlang.org/ja/tsconfig
{
  // src フォルダーだけを対象にする。
  "include": ["./src/**/*"],

  "compilerOptions": {
    //
    // Type Checking
    //
    // true だと switch-case 文の break 忘れを検知するが、それは linter がやればいいと思う。
    "noFallthroughCasesInSwitch": false,

    // インデックスアクセスは null チェックが必要。
    "noUncheckedIndexedAccess": true,

    // できるかぎり true で始める。
    "strict": true,

    //
    // Modules
    //
    // ES Module 記法で書くための設定。
    "module": "ESNext",

    // import 対象の探し方を決める。後方互換を求める理由がなければ原則 Node.
    "moduleResolution": "Node",

    // インポートした JSON ファイルにも型をつける。
    "resolveJsonModule": true,

    //
    // Emit
    //
    // TypeScript から JavaScript の実行ファイルへの変換はほかの仕組みを使う。
    "noEmit": true,

    //
    // JavaScript Support
    //
    // JavaScript ファイルは使う理由がないので許可しない。
    "allowJs": false,

    //
    // Editor Support
    //

    //
    // Interop Constraints
    //
    // `import * as React from "react"` の代わりに `import React from "react"` と書ける。
    "allowSyntheticDefaultImports": true,

    // allowSyntheticDefaultImports のランタイム版といったイメージ。
    // tsc でトランスパイルするわけではないので false でも構わない。
    "esModuleInterop": false,

    // モジュール名（＝ファイル名）の大文字／小文字を厳密に区別する。
    // ファイル名の大文字／小文字が区別されない OS で役に立つ。
    "forceConsistentCasingInFileNames": true,

    // tsc 以外のツールが TypeScript をトランスパイルしやすいようにいくつかの記法を禁止する。
    "isolatedModules": true,

    //
    // Backwards Compatibility
    //

    //
    // Language and Environment
    //
    // <div /> を _jsx("div") に変換する。
    // JSX を使いたいだけなら `import React` は不要。
    "jsx": "react-jsx",

    // 最新のブラウザーで使える API を許可する。
    "lib": ["ES2020", "DOM", "DOM.Iterable"],

    // 最新のブラウザーで使える文法を許可する。
    "target": "ES2020",

    //
    // Compiler Diagnostics
    //

    //
    // Projects
    //

    //
    // Output Formatting
    //

    //
    // Completeness
    //
    // tsc コマンドは自分のソースコードの型チェックだけに用いる（パッケージ間の整合性まではチェックしない）。
    "skipLibCheck": true
  }
}
